<template>
  <div class="min-h-screen bg-white">
    <a href="#main" class="sr-only">Skip to content</a>
    <!-- Offline banner -->
    <div v-if="isOffline" class="banner warn" role="status" aria-live="polite" style="margin:10px">Offline mode: read-only. Queued actions disabled.</div>

    <!-- Header -->
    <header class="bg-white border-b" style="border-color: var(--border)">
      <div class="max-w-6xl mx-auto px-6">
        <div class="flex justify-between h-16 items-center">
          <div class="flex items-center gap-3">
            <NuxtLink to="/dashboard" class="text-gray-800 hover:opacity-80" aria-label="Back to dashboard">← Back</NuxtLink>
            <h1 class="text-xl font-semibold" style="color: var(--text)">Email Portal</h1>
          </div>
          <div class="flex items-center gap-2">
            <div class="note" :title="lastSyncTitle">Last sync: {{ lastSyncRel }}</div>
            <button class="btn-outline" style="max-width: 120px" @click="openSettings" aria-label="Open settings">Settings</button>
            <button class="btn-neutral" style="max-width: 180px" @click="bulkProcess" :disabled="!connected || isOffline" aria-label="Bulk process emails">Bulk Process</button>
          </div>
        </div>
      </div>
    </header>

    <main id="main" class="max-w-6xl mx-auto p-6">
      <!-- Global error banner -->
      <section v-if="banner.show" class="banner error mb-4" role="alert">
        <div>{{ banner.message }}</div>
        <div class="flex items-center gap-2">
          <button v-if="banner.retry" class="btn-outline" style="max-width: 120px" @click="retryBanner">Retry</button>
          <button class="btn-outline" style="max-width: 80px" @click="closeBanner">Close</button>
        </div>
      </section>

      <!-- 0) Access & Consent Gate -->
      <div class="gate-wrap">
<section class="card p-6 mb-6 gate-card" v-if="!connected">
        <h2 class="text-lg font-semibold mb-2" style="color: var(--text)">Connect your email</h2>
        <p class="note mb-4">Sign in via OAuth and accept consent to proceed. Data is retained only for providing service features and can be revoked anytime.</p>

        <div class="space-y-3 mb-4">
          <label class="flex items-center gap-3">
            <input type="checkbox" v-model="agreeOAuth" class="h-4 w-4 border-gray-300" aria-label="Agree to connect email via OAuth 2.0" />
            <span class="text-sm" style="color: var(--text)">I agree to connect my email via OAuth 2.0.</span>
          </label>
          <label class="flex items-center gap-3">
            <input type="checkbox" v-model="consentAI" class="h-4 w-4 border-gray-300" aria-label="Consent to AI reading emails for summaries and drafts" />
            <span class="text-sm" style="color: var(--text)">
              I consent to the AI reading my emails to suggest summaries and draft replies. The AI will never send without my review. 
              <NuxtLink to="/privacy" class="hover:underline">Privacy Policy</NuxtLink>
              <span class="note">(data retention: only for service features)</span>
            </span>
          </label>
        </div>

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-4">
          <button class="btn-neutral" :disabled="!canProceed || isOffline" :style="!canProceed || isOffline ? 'opacity:.6;cursor:not-allowed' : ''" @click="continueWithGmail" aria-label="Continue with Gmail">
            Continue with Gmail
          </button>
          <button class="btn-outline" :disabled="!canProceed || isOffline" :style="!canProceed || isOffline ? 'opacity:.6;cursor:not-allowed' : ''" @click="continueWithMicrosoft" aria-label="Continue with Outlook or Microsoft 365">
            Continue with Outlook / Microsoft 365
          </button>
        </div>
        <div class="flex items-center gap-4 note">
          <NuxtLink to="/privacy" class="hover:underline">Privacy Policy</NuxtLink>
          <NuxtLink to="/terms" class="hover:underline">Data Use</NuxtLink>
          <button class="text-gray-700 hover:underline" @click="revokeAccess" aria-label="Revoke access">Revoke Access</button>
        </div>
      </section>
</div>

      <!-- 1) Main View: Toolbar -->
      <section v-if="connected">
        <div class="toolbar mb-4" role="toolbar" aria-label="Email filters and search">
          <div class="pills" role="tablist" aria-label="Filter by category">
            <button class="pill" :class="{active: pill==='all'}" @click="pill='all'" role="tab" :aria-selected="pill==='all'" tabindex="0">All</button>
            <button class="pill" :class="{active: pill==='unread'}" @click="pill='unread'" role="tab" :aria-selected="pill==='unread'" tabindex="0">Unread ({{ counts.unread }})</button>
            <button class="pill" :class="{active: pill==='reminders'}" @click="pill='reminders'" role="tab" :aria-selected="pill==='reminders'" tabindex="0">Reminders</button>
            <button class="pill" :class="{active: pill==='contracts'}" @click="pill='contracts'" role="tab" :aria-selected="pill==='contracts'" tabindex="0">Contracts</button>
            <button class="pill" :class="{active: pill==='terminations'}" @click="pill='terminations'" role="tab" :aria-selected="pill==='terminations'" tabindex="0">Terminations</button>
            <button class="pill" :class="{active: pill==='ai'}" @click="pill='ai'" role="tab" :aria-selected="pill==='ai'" tabindex="0">AI Pending ({{ counts.ai }})</button>
          </div>
          <div class="toolbar-right">
            <input ref="searchRef" v-model="query" class="input search" placeholder="Search (⌘/Ctrl+K)" aria-label="Search emails" />
            <select v-model="filter.status" class="select" aria-label="Filter by status">
              <option value="">Status</option>
              <option>Unread</option>
              <option>Read</option>
              <option>High Priority</option>
              <option>AI Draft</option>
            </select>
            <select v-model="filter.tag" class="select" aria-label="Filter by type">
              <option value="">Type</option>
              <option>Reminder</option>
              <option>Contract</option>
              <option>Termination</option>
              <option>General</option>
            </select>
            <select v-model="filter.labelId" class="select" aria-label="Filter by label">
              <option value="">Label</option>
              <option value="STARRED">Starred</option>
              <option value="IMPORTANT">Important</option>
              <option v-for="l in labels.filter(x=>x.type==='user')" :key="l.id" :value="l.id">{{ l.name }}</option>
            </select>
            <select v-model="sort" class="select" aria-label="Sort order">
              <option value="newest">Newest</option>
              <option value="oldest">Oldest</option>
              <option value="priority">Priority</option>
            </select>
          </div>
        </div>

        <!-- KPI Cards -->
        <div class="kpi-grid mb-4" aria-label="Summary metrics">
          <div class="kpi">
            <div class="title">This Week</div>
            <div class="value">{{ kpi.thisWeek }}</div>
            <div class="delta">{{ kpi.thisWeekDelta }}</div>
          </div>
          <div class="kpi">
            <div class="title">Avg Response Time</div>
            <div class="value">{{ kpi.avgResponse }}</div>
          </div>
          <div class="kpi">
            <div class="title">AI Suggestions</div>
            <div class="value">{{ kpi.aiSuggestions }}</div>
            <div class="delta">Acceptance {{ kpi.aiAcceptance }}</div>
          </div>
          <div class="kpi">
            <div class="title">Follow-ups</div>
            <div class="value">{{ kpi.followUps }}</div>
            <div class="delta">{{ kpi.followUpNote }}</div>
          </div>
        </div>

        <!-- Inbox Table -->
        <div class="card" role="region" aria-label="Inbox">
          <table class="table" role="table" aria-label="Emails table">
            <thead>
              <tr>
                <th scope="col">Sender</th>
                <th scope="col">Subject</th>
                <th scope="col">Date</th>
                <th scope="col">Type</th>
                <th scope="col">Status</th>
                <th scope="col">Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr v-if="loadingPortal" v-for="i in 6" :key="'sk'+i" class="row" aria-busy="true">
                <td colspan="6">
                  <div class="skeleton" style="height: 20px"></div>
                </td>
              </tr>
              <tr v-else-if="filteredEmails.length===0" class="row">
                <td colspan="6">
                  <div class="flex items-center justify-between">
                    <div>
                      <div class="text-sm" style="color:var(--text)">No emails yet</div>
                      <div class="note">Connect an account to see emails.</div>
                      <div v-if="labelMenuId===mail.id" data-label-panel class="card" style="position:absolute; right:0; top:100%; margin-top:8px; padding:10px; width:240px; z-index:20;">
                        <input v-model="labelSearch" class="input" placeholder="Search labels" aria-label="Search labels" style="margin-bottom:8px"/>
                        <div style="max-height:200px; overflow:auto">
                          <div v-for="l in labels.filter(x=>x.type==='user' && (!labelSearch || x.name.toLowerCase().includes(labelSearch.toLowerCase())))" :key="l.id" style="display:flex;align-items:center;gap:8px;margin-bottom:6px">
                            <input type="checkbox" :checked="selectedLabelIds.has(l.id)" @change="toggleLabelId(l.id)" :id="'lab_'+l.id" />
                            <label :for="'lab_'+l.id">{{ l.name }}</label>
                          </div>
                        </div>
                        <div style="display:flex; gap:8px; margin-top:8px">
                          <button class="btn-neutral" style="max-width:100px" @click="saveLabels(mail)">Save</button>
                          <button class="btn-outline" style="max-width:100px" @click="closeLabelMenu()">Cancel</button>
                        </div>
                      </div>
                    </div>
                    <NuxtLink to="/email" class="btn-outline" style="max-width:220px">Connect account</NuxtLink>
                  </div>
                </td>
              </tr>
              <tr v-else v-for="mail in pagedEmails" :key="mail.id" class="row" tabindex="0" @keydown.enter.prevent="openDetail(mail)" @keydown.space.prevent="openDetail(mail)" :aria-label="'Open email '+mail.subject">
                <td>
                  <div class="sender">
                    <div class="avatar" aria-hidden="true">{{ initials(mail.senderName||mail.senderEmail) }}</div>
                    <div class="email-meta">
                      <div class="name">{{ mail.senderName || mail.senderEmail }}</div>
                      <div class="addr">{{ mail.senderEmail }}</div>
                      <div v-if="labelMenuId===mail.id" data-label-panel class="card" style="position:absolute; right:0; top:100%; margin-top:8px; padding:10px; width:240px; z-index:20;">
                        <input v-model="labelSearch" class="input" placeholder="Search labels" aria-label="Search labels" style="margin-bottom:8px"/>
                        <div style="max-height:200px; overflow:auto">
                          <div v-for="l in labels.filter(x=>x.type==='user' && (!labelSearch || x.name.toLowerCase().includes(labelSearch.toLowerCase())))" :key="l.id" style="display:flex;align-items:center;gap:8px;margin-bottom:6px">
                            <input type="checkbox" :checked="selectedLabelIds.has(l.id)" @change="toggleLabelId(l.id)" :id="'lab_'+l.id" />
                            <label :for="'lab_'+l.id">{{ l.name }}</label>
                          </div>
                        </div>
                        <div style="display:flex; gap:8px; margin-top:8px">
                          <button class="btn-neutral" style="max-width:100px" @click="saveLabels(mail)">Save</button>
                          <button class="btn-outline" style="max-width:100px" @click="closeLabelMenu()">Cancel</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </td>
                <td>
                  <div class="subject"><span v-if="mail.unread" class="dot" aria-label="Unread" title="Unread"></span><span class="subject-line"><strong>{{ mail.subject }}</strong> — <span class="note">{{ mail.snippet }}</span></span></div>
                </td>
                <td>
                  <div><time :datetime="mail.date" :title="formatDate(mail.date)">{{ relative(mail.date) }}</time></div>
                  <div class="note">{{ formatDate(mail.date) }}</div>
                </td>
                <td>
                  <span class="chip" :class="tagClass(mail.type)">{{ mail.type }}</span>
                </td>
                <td>
                  <div class="flex gap-2 chips-nowrap">
                    <span v-if="mail.priority" class="chip priority">High Priority</span>
                    <span class="chip" :class="statusClass(mail.status)">{{ mail.status }}</span>
                    
                  </div>
                </td>
                <td>
                  <div class="actions">
                    <button class="icon-btn" aria-label="View email" title="View" @click="openDetail(mail)">👁️</button>
                    <button class="icon-btn" :title="mail.starred ? 'Unstar' : 'Star'" :aria-label="mail.starred ? 'Unstar' : 'Star'" @click="toggleStar(mail)">{{ mail.starred ? '⭐' : '☆' }}</button>
                    <button class="icon-btn" :aria-label="mail.unread?'Mark read':'Mark unread'" :title="mail.unread?'Mark read':'Mark unread'" @click="toggleRead(mail)">{{ mail.unread?'✉️':'📭' }}</button>
                    <button class="icon-btn" aria-label="Generate AI draft" title="Generate AI" :disabled="!connected || isOffline" @click="generateFor(mail)">✨</button>
                    <div class="relative">
                      <button class="icon-btn" aria-label="More actions" title="More" @click="toggleMenu(mail, $event)" :aria-expanded="activeMenuId===mail.id" aria-haspopup="menu">⋯</button>
                      <div :data-menu="mail.id" v-if="activeMenuId===mail.id" class="card" style="position:absolute; right:0; top:32px; padding:8px; min-width:160px; z-index:10;" role="menu">
                        <button class="btn-outline" role="menuitem" tabindex="0"    :data-item-index="3" style="width:100%; margin-bottom:6px" @keydown="onMenuKeydown($event, 3, mail.id)" @click="archive(mail)">Archive</button>
                        <button class="btn-outline" role="menuitem" tabindex="0" :data-item-index="1" style="width:100%; margin-bottom:6px" @keydown="onMenuKeydown($event, 3, mail.id)" @click="openLabelMenu(mail)">Label…</button>
                        <button class="btn-outline" role="menuitem" tabindex="0" :data-item-index="2" style="width:100%" @keydown="onMenuKeydown($event, 3, mail.id)" @click="assign(mail)">Assign</button>
                      </div>
                      <div v-if="labelMenuId===mail.id" data-label-panel class="card" style="position:absolute; right:0; top:100%; margin-top:8px; padding:10px; width:240px; z-index:20;">
                        <input v-model="labelSearch" class="input" placeholder="Search labels" aria-label="Search labels" style="margin-bottom:8px"/>
                        <div style="max-height:200px; overflow:auto">
                          <div v-for="l in labels.filter(x=>x.type==='user' && (!labelSearch || x.name.toLowerCase().includes(labelSearch.toLowerCase())))" :key="l.id" style="display:flex;align-items:center;gap:8px;margin-bottom:6px">
                            <input type="checkbox" :checked="selectedLabelIds.has(l.id)" @change="toggleLabelId(l.id)" :id="'lab_'+l.id" />
                            <label :for="'lab_'+l.id">{{ l.name }}</label>
                          </div>
                        </div>
                        <div style="display:flex; gap:8px; margin-top:8px">
                          <button class="btn-neutral" style="max-width:100px" @click="saveLabels(mail)">Save</button>
                          <button class="btn-outline" style="max-width:100px" @click="closeLabelMenu()">Cancel</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
          <div class="p-3 flex justify-center">
            <button v-if="hasMore" class="btn-outline" style="max-width: 200px" @click="loadMore" aria-label="Load more emails">Load More</button>
          </div>
        </div>
      </section>
    </main>

    <!-- 2) Email Detail Modal -->
    <div v-if="showDetail" class="modal-backdrop" @click.self="closeDetail">
      <div class="modal" role="dialog" aria-modal="true" aria-labelledby="detailTitle">
        <div class="header">
          <div id="detailTitle" class="text-lg font-semibold" style="color:var(--text)">{{ selected?.subject }}</div>
          <div class="note">From {{ selected?.senderName || selected?.senderEmail }} — {{ formatDate(selected?.date||'') }}</div>
          <div class="flex gap-2 mt-2">
            <span class="chip" :class="statusClass(selected?.status||'')">{{ selected?.status }}</span>
            <span v-if="selected?.priority" class="chip priority">High Priority</span>
          </div>
        </div>
        <div class="body">
          <div>
            <div class="prose max-w-none whitespace-pre-wrap" style="color:var(--text)">{{ selected?.body }}</div>
          </div>
          <aside>
            <div class="card p-3 mb-3">
              <div class="badge">Review before send</div>
            </div>
            <div class="card p-3 mb-3">
              <div class="text-sm font-semibold mb-2">AI Summary</div>
              <div class="note" v-if="!aiSummary">No summary yet.</div>
              <div class="prose max-w-none whitespace-pre-wrap" v-else>{{ aiSummary }}</div>
            </div>
            <div class="card p-3">
              <div class="text-sm font-semibold mb-2">Extracted Entities</div>
              <div class="note" v-if="entities.length===0">No entities.</div>
              <ul v-else class="list-disc pl-4">
                <li v-for="e in entities" :key="e">{{ e }}</li>
              </ul>
            </div>
          </aside>
        </div>
        <div class="footer">
          <button class="btn-neutral" :disabled="!connected || aiBusy || isOffline" @click="aiSummarize">{{ aiBusy?'Working…':'Generate AI Response' }}</button>
          <button class="btn-outline" @click="convertToDocument">Convert to Document</button>
          <button class="btn-outline" @click="scheduleFollowUp">Schedule Follow-up</button>
          <div class="note ml-auto">AI locked until OAuth + consent</div>
        </div>
      </div>
    </div>

    <!-- Settings Modal -->
    <div v-if="showSettings" class="modal-backdrop" @click.self="closeSettings">
      <div class="modal" role="dialog" aria-modal="true" aria-labelledby="settingsTitle">
        <div class="header">
          <div id="settingsTitle" class="text-lg font-semibold" style="color:var(--text)">Email Settings</div>
        </div>
        <div class="body" style="grid-template-columns:1fr">
          <div class="card p-4">
            <label class="flex items-center gap-3 mb-2">
              <input type="checkbox" v-model="consentAI" class="h-4 w-4" @change="persistConsent" aria-label="Allow AI read access" />
              <span>Allow AI read access</span>
            </label>
            <label class="flex items-center gap-3 mb-2">
              <input type="checkbox" v-model="draftOnly" class="h-4 w-4" @change="persistDraftOnly" aria-label="Draft-only mode" />
              <span>Draft‑only mode</span>
            </label>
            <div class="note mb-2">Consent timestamp: {{ consentTS || '—' }}</div>
            <div class="note mb-4">Last sync: {{ lastSyncTitle }}</div>
            <button class="btn-outline" style="max-width:160px" @click="revokeAccess">Revoke Access</button>
          </div>
        </div>
        <div class="footer">
          <button class="btn-neutral" @click="closeSettings">Close</button>
        </div>
      </div>
    </div>

    <!-- Toasts -->
    <div class="toast-container" aria-live="polite" aria-atomic="true">
      <div v-for="t in toasts" :key="t.id" class="toast" :class="t.type">{{ t.message }}</div>
    </div>
  </div>
</template>

<script setup lang="ts">

const user = ref<any>(null)
const agreeOAuth = ref(false)
const consentAI = ref(false)
const consentTS = ref('')
const draftOnly = ref(false)
const isOffline = ref(false)

const banner = reactive<{ show:boolean; message:string; retry: null | (()=>any) }>({ show:false, message:'', retry:null })

const pill = ref<'all'|'unread'|'reminders'|'contracts'|'terminations'|'ai'>('all')
const query = ref('')
const filter = reactive({ status: '', tag: '', labelId: '' })
const sort = ref<'newest'|'oldest'|'priority'>('newest')

const emails = ref<any[]>([])
const page = ref(1)
const pageSize = 10
const loadingPortal = ref(true)
const nextPageToken = ref<string>('')
const loadingMore = ref(false)

const searchRef = ref<HTMLInputElement|null>(null)

const kpi = reactive({ thisWeek: 0, thisWeekDelta: '+0%', avgResponse: '—', aiSuggestions: 0, aiAcceptance: '—', followUps: 0, followUpNote: '' })

const counts = reactive({ unread: 0, ai: 0 })

const canProceed = computed(() => agreeOAuth.value && consentAI.value)
const connected = computed(() => !!user.value && canProceed.value)

const lastSync = ref<number>(Date.now())
const lastSyncRel = computed(()=> relative(new Date(lastSync.value).toISOString()))
const lastSyncTitle = computed(()=> new Date(lastSync.value).toLocaleString())

onMounted(() => {
  document.addEventListener('mousedown', onDocClick)
  try {
    agreeOAuth.value = localStorage.getItem('agree_oauth') === '1'
    consentAI.value = localStorage.getItem('consent_ai') === '1'
    consentTS.value = localStorage.getItem('consent_ts') || ''
    draftOnly.value = localStorage.getItem('draft_only') === '1'
  } catch {}
  fetchMe()
  try { hydrateMock && hydrateMock() } catch(e) {}
  
  try { tryLoadGmail && tryLoadGmail() } catch(e) {}

  window.addEventListener('keydown', onKeydown)
  const setOffline = ()=> { isOffline.value = !navigator.onLine }
  setOffline(); window.addEventListener('online', setOffline); window.addEventListener('offline', setOffline)
})

onBeforeUnmount(() => { window.removeEventListener('keydown', onKeydown); document.removeEventListener('mousedown', onDocClick) })

function onKeydown(e: KeyboardEvent) {
  if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase()==='k') {
    e.preventDefault(); searchRef.value?.focus()
  }
}

async function fetchMe() {
  try {
    const me: any = await $fetch('/api/auth/me')
    user.value = (me?.valid || me?.user) ? (me.user || me) : null
  } catch { user.value = null }
}

function persistConsent(){ try { localStorage.setItem('consent_ai', consentAI.value?'1':'0') } catch {} }
function persistDraftOnly(){ try { localStorage.setItem('draft_only', draftOnly.value?'1':'0') } catch {} }

function continueWithGmail() {
  if (!canProceed.value) return
  try { localStorage.setItem('agree_oauth','1'); localStorage.setItem('consent_ai','1'); localStorage.setItem('consent_ts', new Date().toISOString()); consentTS.value = localStorage.getItem('consent_ts')||'' } catch {}
  window.location.href = '/api/auth/google'
}

function continueWithMicrosoft() {
  if (!canProceed.value) return
  showBanner('Microsoft 365 integration is not configured yet.')
}

async function revokeAccess() {
  try { await $fetch('/api/auth/logout.get'); pushToast('info','Access revoked') } catch { pushToast('error','Logout failed') }
  try { localStorage.removeItem('agree_oauth'); localStorage.removeItem('consent_ai'); localStorage.removeItem('consent_ts') } catch {}
  user.value = null
}

function hydrateMock() {
  
 {
  const now = Date.now(); lastSync.value = now
  const types = ['General','Reminder','Contract','Termination']
  const statuses = ['Unread','Read','High Priority','AI Draft']
  emails.value = Array.from({length: 28}).map((_,i)=>({
    id: 'm'+i,
    senderName: ['Anna Schmidt','Dr. Keller','HR Team','Client Support'][i%4],
    senderEmail: ['anna@example.com','keller@kanzlei.de','hr@corp.com','support@service.io'][i%4],
    subject: ['Vertragsprüfung','Kündigungsfrist','Rückfrage zum Termin','Mahnung'][i%4] + ' #' + (1024+i),
    snippet: 'Kurzer Auszug aus der E‑Mail, um den Inhalt zu erkennen…',
    body: 'Sehr geehrte Damen und Herren,\n\nDies ist ein Beispieltext der E‑Mail. Bitte prüfen Sie die Fristen und antworten Sie entsprechend.\n\nMit freundlichen Grüßen',
    date: new Date(now - i*3600*1000).toISOString(),
    type: types[i%types.length],
    status: statuses[i%statuses.length],
    priority: i%7===0,
    unread: i%3===0
  }))
  updateCounts()
  Object.assign(kpi, { thisWeek: 138, thisWeekDelta: '+4.2%', avgResponse: '3h 12m', aiSuggestions: 24, aiAcceptance: '62%', followUps: 5, followUpNote: '2 due today' })
  setTimeout(()=> loadingPortal.value=false, 400)
}

function updateCounts(){
  counts.unread = emails.value.filter(m=>m.unread).length
  counts.ai = emails.value.filter(m=>m.status==='AI Draft').length
}

const filteredEmails = computed(()=>{
  let list = emails.value.slice()
  if (pill.value==='unread') list = list.filter(m=>m.unread)
  else if (pill.value==='reminders') list = list.filter(m=>m.type==='Reminder')
  else if (pill.value==='contracts') list = list.filter(m=>m.type==='Contract')
  else if (pill.value==='terminations') list = list.filter(m=>m.type==='Termination')
  else if (pill.value==='ai') list = list.filter(m=>m.status==='AI Draft')

  if (query.value.trim()) {
    const q = query.value.toLowerCase()
    list = list.filter(m=> (m.subject+m.snippet+m.senderName+m.senderEmail).toLowerCase().includes(q))
  }
  if (filter.status) list = list.filter(m=>m.status===filter.status)
  if (filter.tag) list = list.filter(m=>({Reminder:'Reminder',Contract:'Contract',Termination:'Termination',General:'General'})[m.type]===filter.tag)
  if (filter.labelId) {
    if (filter.labelId==='STARRED') list = list.filter(m=>m.starred)
    else if (filter.labelId==='IMPORTANT') list = list.filter(m=>m.priority)
    else list = list.filter(m=>Array.isArray(m.labelIds) && m.labelIds.includes(filter.labelId))
  }
  if (sort.value==='newest') list.sort((a,b)=> +new Date(b.date)-+new Date(a.date))
  else if (sort.value==='oldest') list.sort((a,b)=> +new Date(a.date)-+new Date(b.date))
  else if (sort.value==='priority') list.sort((a,b)=> (b.priority?1:0)-(a.priority?1:0))
  return list
})

const pagedEmails = computed(()=> filteredEmails.value.slice(0, page.value*pageSize))
const hasMore = computed(()=> filteredEmails.value.length > page.value*pageSize)
function loadMore(){ page.value++; pushToast('info','Loaded more') }

function initials(name:string){ return (name||'?').split(' ').map(s=>s[0]).join('').slice(0,2).toUpperCase() }
function relative(iso:string){
  try {
    const d = new Date(iso)
    let sec = Math.round((Date.now() - +d) / 1000)
    const locale = (typeof navigator !== 'undefined' && navigator.language) ? navigator.language : 'de-DE'
    const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto', style: 'narrow' })
    const abs = Math.abs(sec)
    if (abs < 60) return rtf.format(-sec, 'second')
    const min = Math.round(sec/60)
    if (Math.abs(min) < 60) return rtf.format(-min, 'minute')
    const hr = Math.round(min/60)
    if (Math.abs(hr) < 24) return rtf.format(-hr, 'hour')
    const day = Math.round(hr/24)
    return rtf.format(-day, 'day')
  } catch { return 'now' }
}
function formatDate(iso:string){
  try {
    const d = new Date(iso)
    const locale = (typeof navigator !== 'undefined' && navigator.language) ? navigator.language : 'de-DE'
    const fmt = new Intl.DateTimeFormat(locale, { dateStyle: 'short', timeStyle: 'short', hour12: false })
    return fmt.format(d)
  } catch { return iso }
}
function tagClass(t:string){ return { Reminder:'', Contract:'', Termination:'', General:'' }[t] }
function statusClass(s:string){ return { 'Unread':'unread', 'Read':'read', 'High Priority':'priority', 'AI Draft':'ai' }[s] }


async function toggleRead(m:any){
  if(isOffline.value) return
  const was = m.unread
  m.unread = !m.unread
  updateCounts()
  try {
    const add = m.unread ? ['UNREAD'] : []
    const remove = m.unread ? [] : ['UNREAD']
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } })
    pushToast('success', m.unread ? 'Marked as unread' : 'Marked as read')
  } catch (e){
    // revert on failure
    m.unread = was
    updateCounts()
    pushToast('error','Failed to update status')
  }
}


function toggleMenu(m:any, ev?: Event){
  if (activeMenuId.value === m.id) { activeMenuId.value = null; return }
  activeMenuId.value = m.id
  menuAnchorEl = (ev?.currentTarget as HTMLElement) || null
  try { nextTick(() => { const el = document.querySelector(`[data-menu='${m.id}'] [data-item-index='0']`) as HTMLElement; el?.focus(); positionMenu(m.id) }) } catch {}
}


async function archive(m:any){
  if(isOffline.value) return
  try {
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add: [], remove: ['INBOX'] } })
    m.status='Read'; m.unread=false; activeMenuId.value=null; updateCounts();
    pushToast('success','Archived')
  } catch(e){ pushToast('error','Archive failed') }
}

function label(m:any){ if(isOffline.value) return; activeMenuId.value=null; pushToast('success','Label applied') }
function assign(m:any){ if(isOffline.value) return; activeMenuId.value=null; pushToast('success','Assigned') }

const labelMenuId = ref<string|null>(null)
const labels = ref<any[]>([])
const labelsLoaded = ref(false)
const labelSearch = ref('')
const selectedLabelIds = ref<Set<string>>(new Set())

async function ensureLabels(){
  if (labelsLoaded.value) return
  try { const r:any = await $fetch('/api/email/labels'); if(r?.success){ labels.value = r.labels; labelsLoaded.value = true } } catch(e){}
}

function openLabelMenu(m:any){
  ensureLabels(); labelMenuId.value = m.id; selectedLabelIds.value = new Set(m.labelIds||[])
}
function closeLabelMenu(){ labelMenuId.value = null }
function toggleLabelId(id:string){ if(selectedLabelIds.value.has(id)) selectedLabelIds.value.delete(id); else selectedLabelIds.value.add(id) }
async function saveLabels(m:any){
  const before = new Set(m.labelIds||[])
  const after = selectedLabelIds.value
  const add = Array.from(after).filter(x=>!before.has(x))
  const remove = Array.from(before).filter(x=>!after.has(x))
  try { await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } }); m.labelIds = Array.from(after); pushToast('success','Labels updated') } catch(e){ pushToast('error','Failed to update labels') }
  closeLabelMenu()
}

async function toggleStar(m:any){
  if(isOffline.value) return
  const was = !!m.starred
  m.starred = !m.starred
  try {
    const add = m.starred ? ['STARRED'] : []
    const remove = m.starred ? [] : ['STARRED']
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } })
    pushToast('success', m.starred ? 'Starred' : 'Unstarred')
  } catch(e){ m.starred = was; pushToast('error','Failed to toggle star') }
}
function bulkProcess(){ if(isOffline.value) return; pushToast('info','Bulk processed 10 items') }

const showDetail = ref(false)
const selected = ref<any>(null)
function openDetail(m:any){ selected.value=m; showDetail.value=true }
function closeDetail(){ showDetail.value=false }

const aiSummary = ref('')
const entities = ref<string[]>([])
const aiBusy = ref(false)

const activeMenuId = ref<string|null>(null)
let menuAnchorEl: HTMLElement | null = null

async function aiSummarize(){
  if(!connected.value || !selected.value || isOffline.value) return
  aiBusy.value=true; aiSummary.value=''; entities.value=[]
  try{
    const payload = { title: 'Email summary', document_type:'email', prompt: `Summarize key points, deadlines, parties, and requested actions.\n\nEmail:\n${selected.value.body}` }
    const res:any = await $fetch('/api/auth/proxy.post',{ method:'POST', body:{ path:'/api/ai/generate-document-simple', method:'POST', body: payload }})
    if(res?.success && res?.document?.content){ aiSummary.value = String(res.document.content); entities.value = extractEntities(aiSummary.value); pushToast('success','AI draft generated') }
    else { showBanner(res?.error || 'Generation failed', aiSummarize) }
  }catch(e:any){ showBanner(String(e?.data?.statusMessage || e?.message || e), aiSummarize) }
  finally{ aiBusy.value=false }
}

function extractEntities(text:string){
  const found = new Set<string>()
  ;(text.match(/\b\d{1,2}\.\d{1,2}\.\d{2,4}\b/g)||[]).forEach(x=>found.add('Date: '+x))
  ;(text.match(/\b[A-ZÄÖÜ][a-zäöü]+\s[A-ZÄÖÜ][a-zäöü]+\b/g)||[]).slice(0,3).forEach(x=>found.add('Name: '+x))
  return Array.from(found)
}

function generateFor(m:any){ if(isOffline.value) { pushToast('error','Offline: cannot generate'); return } openDetail(m); aiSummarize() }
function convertToDocument(){ if(isOffline.value) return; pushToast('info','Converted to document') }
function scheduleFollowUp(){ if(isOffline.value) return; pushToast('info','Follow-up scheduled') }

function positionMenu(mailId: string){
  const menu = document.querySelector(`[data-menu='${mailId}']`) as HTMLElement
  if (!menu) return
  const rect = menu.getBoundingClientRect()
  const vw = window.innerWidth, vh = window.innerHeight
  // vertical flip
  if (rect.bottom > vh - 8) { menu.style.top = 'auto'; (menu.style as any).bottom = '32px' } else { menu.style.top = '32px'; (menu.style as any).bottom = '' }
  // horizontal adjust
  if (rect.right > vw - 8) { menu.style.right = 'auto'; menu.style.left = '0px' } else { menu.style.left = ''; menu.style.right = '0px' }
}


function onDocClick(e: MouseEvent){
  if(!activeMenuId.value) return
  const menu = document.querySelector(`[data-menu='${activeMenuId.value}']`) as HTMLElement
  const btn = menuAnchorEl
  const target = e.target as Node
  if ((menu && menu.contains(target)) || (btn && btn.contains(target))) return
  activeMenuId.value = null
}

function onMenuKeydown(e: KeyboardEvent, count: number, mailId: string){
  const t = e.target as HTMLElement
  const idx = Number((t.dataset && (t as any).dataset.itemIndex) || 0)
  if (e.key === 'ArrowDown') { e.preventDefault(); const ni = (idx+1)%count; focusMenuItem(mailId, ni) }
  else if (e.key === 'ArrowUp') { e.preventDefault(); const ni = (idx-1+count)%count; focusMenuItem(mailId, ni) }
  else if (e.key === 'Escape') { e.preventDefault(); activeMenuId.value = null }
  else if (e.key === 'Home') { e.preventDefault(); focusMenuItem(mailId, 0) }
  else if (e.key === 'End') { e.preventDefault(); focusMenuItem(mailId, count-1) }
}

async function toggleImportant(m:any){
  if(isOffline.value) return
  const was = !!m.priority
  m.priority = !m.priority
  try {
    const add = m.priority ? ['IMPORTANT'] : []
    const remove = m.priority ? [] : ['IMPORTANT']
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } })
    pushToast('success', m.priority ? 'Marked important' : 'Unmarked important')
  } catch(e){ m.priority = was; pushToast('error','Failed to toggle important') }
}

function focusMenuItem(mailId: string, index: number){
  const el = document.querySelector(`[data-menu='${mailId}'] [data-item-index='${index}']`) as HTMLElement
  el?.focus()
}


// Toasts
const toasts = ref<{id:number; type:'success'|'error'|'info'; message:string}[]>([])
let toastId = 1
function pushToast(type:'success'|'error'|'info', message:string){ const id=toastId++; toasts.value.push({id,type,message}); setTimeout(()=> removeToast(id), 2500) }
function removeToast(id:number){ toasts.value = toasts.value.filter(t=>t.id!==id) }

// Banner helpers
function showBanner(message:string, retry?: ()=>any){ banner.show=true; banner.message=message; banner.retry = retry || null }
function closeBanner(){ banner.show=false; banner.message=''; banner.retry=null }
function retryBanner(){ if (banner.retry) { const fn = banner.retry; closeBanner(); fn() } }

// Settings modal
const showSettings = ref(false)
function openSettings(){ showSettings.value = true }
function closeSettings(){ showSettings.value = false }
</script>

<style scoped>
/* White minimal theme, neutral accents; focus and ARIA handled in global CSS */
</style>