<template>
  <div class="min-h-screen bg-white font-sans">
    <a href="#main" class="sr-only focus:not-sr-only">Skip to main content</a>
    
    <!-- Offline Banner -->
    <div v-if="isOffline" class="bg-orange-50 border-l-4 border-orange-400 p-4 mb-4" role="alert" aria-live="polite">
      <div class="flex items-center">
        <div class="text-orange-700">
          <p class="font-medium">Offline Mode</p>
          <p class="text-sm">Read-only access. Actions are disabled until connection is restored.</p>
        </div>
      </div>
    </div>

    <!-- Main Header -->
    <header class="bg-white border-b border-gray-200 sticky top-0 z-30 backdrop-blur-sm bg-white/95">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <div class="flex items-center space-x-4">
            <NuxtLink 
              to="/dashboard" 
              class="inline-flex items-center text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 rounded-md px-2 py-1"
              aria-label="Return to dashboard"
            >
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
              </svg>
              Back
            </NuxtLink>
            <h1 class="text-2xl font-semibold text-gray-900">Email Portal</h1>
            <div v-if="lastSyncRel" class="hidden md:flex items-center text-sm text-gray-500">
              <div class="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
              Last sync: {{ lastSyncRel }}
            </div>
          </div>
          
          <div class="flex items-center space-x-3">
            <button
              @click="openSettings"
              class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
              :disabled="isOffline"
            >
              Settings
            </button>
            <button
              @click="bulkProcess"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
              :disabled="!connected || isOffline"
            >
              Bulk Process
            </button>
          </div>
        </div>
      </div>
    </header>
    <main id="main" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Error Banner -->
      <div v-if="banner.show" class="bg-red-50 border-l-4 border-red-400 p-4 mb-6 rounded-r-md" role="alert">
        <div class="flex items-start">
          <div class="flex-1">
            <h3 class="text-sm font-medium text-red-800">Error</h3>
            <p class="mt-1 text-sm text-red-700">{{ banner.message }}</p>
          </div>
          <div class="flex-shrink-0 ml-4">
            <div class="flex space-x-2">
              <button
                v-if="banner.retry"
                @click="retryBanner"
                class="inline-flex items-center px-3 py-1 border border-red-300 text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
              >
                Retry
              </button>
              <button
                @click="closeBanner"
                class="inline-flex items-center px-3 py-1 border border-red-300 text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
              >
                Dismiss
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- OAuth & Consent Gate -->
      <div v-if="!connected" class="max-w-2xl mx-auto">
        <div class="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
          <div class="px-6 py-8 sm:px-8">
            <div class="text-center mb-8">
              <h2 class="text-2xl font-semibold text-gray-900 mb-2">Connect your email</h2>
              <p class="text-gray-600 max-w-lg mx-auto">
                Sign in via OAuth 2.0 and grant AI consent to access your email features. 
                Data is used only for service functionality and can be revoked at any time.
              </p>
            </div>

            <!-- Consent Checkboxes -->
            <div class="space-y-4 mb-8">
              <label class="flex items-start space-x-3 cursor-pointer">
                <input 
                  type="checkbox" 
                  v-model="agreeOAuth" 
                  class="w-4 h-4 text-gray-900 border-gray-300 rounded focus:ring-gray-500 focus:ring-2 mt-1" 
                  aria-describedby="oauth-description"
                />
                <div>
                  <span class="text-sm font-medium text-gray-900">I agree to connect my email via OAuth 2.0.</span>
                  <p id="oauth-description" class="text-xs text-gray-500 mt-1">
                    Secure authentication protocol that doesn't share your password.
                  </p>
                </div>
              </label>
              
              <label class="flex items-start space-x-3 cursor-pointer">
                <input 
                  type="checkbox" 
                  v-model="consentAI" 
                  class="w-4 h-4 text-gray-900 border-gray-300 rounded focus:ring-gray-500 focus:ring-2 mt-1" 
                  aria-describedby="ai-description"
                />
                <div>
                  <span class="text-sm font-medium text-gray-900">
                    I consent to the AI reading my emails to suggest summaries and draft replies.
                  </span>
                  <p id="ai-description" class="text-xs text-gray-500 mt-1">
                    The AI will never send emails without your explicit review and approval.
                  </p>
                </div>
              </label>
            </div>

            <!-- OAuth Buttons -->
            <div class="space-y-3 mb-6">
              <button
                @click="continueWithGmail"
                :disabled="!canProceed || isOffline"
                class="w-full flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Gmail
              </button>
              
              <button
                @click="continueWithMicrosoft"
                :disabled="!canProceed || isOffline"
                class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z"/>
                </svg>
                Continue with Outlook / Microsoft 365
              </button>
            </div>

            <!-- Footer Links -->
            <div class="flex flex-wrap items-center justify-center gap-4 pt-4 border-t border-gray-200 text-sm text-gray-500">
              <NuxtLink to="/privacy" class="hover:text-gray-700 focus:outline-none focus:underline">Privacy Policy</NuxtLink>
              <NuxtLink to="/terms" class="hover:text-gray-700 focus:outline-none focus:underline">Data Use</NuxtLink>
              <button 
                @click="revokeAccess" 
                class="hover:text-gray-700 focus:outline-none focus:underline"
                :disabled="isOffline"
              >
                Revoke Access
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Email Interface -->
      <div v-if="connected" class="space-y-6">
        
        <!-- Toolbar -->
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
          <div class="p-4">
            <!-- Filter Pills -->
            <div class="flex flex-wrap items-center gap-2 mb-4" role="tablist" aria-label="Email categories">
              <button
                v-for="tab in pillTabs"
                :key="tab.key"
                @click="pill = tab.key"
                :class="[
                  'inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2',
                  pill === tab.key
                    ? 'bg-gray-900 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                ]"
                role="tab"
                :aria-selected="pill === tab.key"
              >
                {{ tab.label }}
                <span v-if="tab.count !== undefined" class="ml-2 px-2 py-0.5 text-xs bg-white/20 rounded-full">
                  {{ tab.count }}
                </span>
              </button>
            </div>

            <!-- Search and Filters -->
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
              <div class="relative flex-1 max-w-md">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                  </svg>
                </div>
                <input
                  ref="searchRef"
                  v-model="query"
                  type="search"
                  placeholder="Search emails (⌘/Ctrl+K)"
                  class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-gray-500 focus:border-gray-500"
                  aria-label="Search emails"
                />
              </div>
              
              <div class="flex items-center space-x-2">
                <select
                  v-model="filter.status"
                  class="block pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-gray-500 focus:border-gray-500 rounded-md"
                  aria-label="Filter by status"
                >
                  <option value="">All Status</option>
                  <option>Unread</option>
                  <option>Read</option>
                  <option>High Priority</option>
                  <option>AI Draft</option>
                </select>
                
                <select
                  v-model="filter.tag"
                  class="block pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-gray-500 focus:border-gray-500 rounded-md"
                  aria-label="Filter by type"
                >
                  <option value="">All Types</option>
                  <option>Reminder</option>
                  <option>Contract</option>
                  <option>Termination</option>
                  <option>General</option>
                </select>
                
                <select
                  v-model="sort"
                  class="block pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-gray-500 focus:border-gray-500 rounded-md"
                  aria-label="Sort order"
                >
                  <option value="newest">Newest First</option>
                  <option value="oldest">Oldest First</option>
                  <option value="priority">Priority First</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- KPI Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" aria-label="Email metrics summary">
          <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-5">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-gray-600 truncate">This Week</p>
                <p class="text-2xl font-semibold text-gray-900">{{ kpi.thisWeek }}</p>
              </div>
              <div class="flex items-center text-sm">
                <span :class="[
                  'font-medium',
                  kpi.thisWeekDelta.startsWith('+') ? 'text-green-600' : 'text-red-600'
                ]">{{ kpi.thisWeekDelta }}</span>
              </div>
            </div>
            <p class="mt-1 text-xs text-gray-500">vs. last week</p>
          </div>
          
          <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-5">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-gray-600 truncate">Avg Response Time</p>
                <p class="text-2xl font-semibold text-gray-900">{{ kpi.avgResponse }}</p>
              </div>
              <div class="rounded-full bg-blue-100 p-2">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
            </div>
            <p class="mt-1 text-xs text-gray-500">average processing time</p>
          </div>
          
          <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-5">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-gray-600 truncate">AI Suggestions</p>
                <p class="text-2xl font-semibold text-gray-900">{{ kpi.aiSuggestions }}</p>
              </div>
              <div class="rounded-full bg-purple-100 p-2">
                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                </svg>
              </div>
            </div>
            <p class="mt-1 text-xs text-gray-500">{{ kpi.aiAcceptance }} acceptance rate</p>
          </div>
          
          <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-5">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-gray-600 truncate">Follow-ups</p>
                <p class="text-2xl font-semibold text-gray-900">{{ kpi.followUps }}</p>
              </div>
              <div class="rounded-full bg-orange-100 p-2">
                <svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM9 3h6l6 6v7a2 2 0 01-2 2H9a2 2 0 01-2-2V5a2 2 0 012-2z"/>
                </svg>
              </div>
            </div>
            <p class="mt-1 text-xs text-gray-500">{{ kpi.followUpNote }}</p>
          </div>
        </div>

        <!-- Inbox Table -->
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden">
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" aria-label="Email inbox">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">
                    Sender
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-2/5">
                    Subject
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
                    Date
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">
                    Type
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">
                    Status
                  </th>
                  <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <!-- Loading State -->
                <tr v-if="loadingPortal" v-for="i in 5" :key="'skeleton-'+i" class="animate-pulse">
                  <td colspan="6" class="px-6 py-4">
                    <div class="flex items-center space-x-4">
                      <div class="w-10 h-10 bg-gray-200 rounded-full"></div>
                      <div class="flex-1 space-y-2">
                        <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                        <div class="h-3 bg-gray-200 rounded w-1/2"></div>
                      </div>
                      <div class="w-16 h-4 bg-gray-200 rounded"></div>
                      <div class="w-20 h-6 bg-gray-200 rounded-full"></div>
                    </div>
                  </td>
                </tr>
                
                <!-- Empty State -->
                <tr v-else-if="filteredEmails.length === 0" class="">
                  <td colspan="6" class="px-6 py-12 text-center">
                    <div class="flex flex-col items-center">
                      <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                      </svg>
                      <h3 class="text-lg font-medium text-gray-900 mb-1">No emails found</h3>
                      <p class="text-gray-500 mb-4">Connect an email account to start managing your messages.</p>
                      <button 
                        @click="() => { connected.value = false; pill = 'all'; }"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                      >
                        Connect Email Account
                      </button>
                    </div>
                  </td>
                </tr>
                <!-- Email Rows -->
                <tr 
                  v-for="mail in pagedEmails" 
                  :key="mail.id" 
                  class="hover:bg-gray-50 cursor-pointer focus-within:bg-gray-50 transition-colors"
                  tabindex="0"
                  @click="openDetail(mail)"
                  @keydown.enter.prevent="openDetail(mail)"
                  @keydown.space.prevent="openDetail(mail)"
                  :aria-label="'Open email from ' + (mail.senderName || mail.senderEmail) + ' about ' + mail.subject"
                >
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 w-10 h-10">
                        <div class="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center text-sm font-medium text-gray-600">
                          {{ initials(mail.senderName || mail.senderEmail) }}
                        </div>
                      </div>
                      <div class="ml-4 min-w-0 flex-1">
                        <div class="text-sm font-medium text-gray-900 truncate">
                          {{ mail.senderName || mail.senderEmail }}
                        </div>
                        <div class="text-sm text-gray-500 truncate">
                          {{ mail.senderEmail }}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4">
                    <div class="flex items-start">
                      <div v-if="mail.unread" class="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3" aria-label="Unread"></div>
                      <div class="min-w-0 flex-1">
                        <div class="text-sm font-medium text-gray-900 mb-1">
                          {{ mail.subject }}
                        </div>
                        <div class="text-sm text-gray-500 line-clamp-2">
                          {{ mail.snippet }}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <div class="space-y-1">
                      <time :datetime="mail.date" class="block font-medium text-gray-900">
                        {{ relative(mail.date) }}
                      </time>
                      <div class="text-xs">
                        {{ formatDate(mail.date) }}
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span :class="[
                      'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                      getTypeClass(mail.type)
                    ]">
                      {{ mail.type }}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex flex-col space-y-1">
                      <span v-if="mail.priority" :class="[
                        'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium',
                        'bg-red-100 text-red-800'
                      ]">
                        High Priority
                      </span>
                      <span :class="[
                        'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium',
                        getStatusClass(mail.status)
                      ]">
                        {{ mail.status }}
                      </span>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div class="flex items-center justify-end space-x-2">
                      <!-- Star Button -->
                      <button
                        @click.stop="toggleStar(mail)"
                        :class="[
                          'p-1 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-500',
                          mail.starred ? 'text-yellow-500' : 'text-gray-400'
                        ]"
                        :aria-label="mail.starred ? 'Remove star' : 'Add star'"
                        :disabled="isOffline"
                      >
                        <svg class="w-4 h-4" :fill="mail.starred ? 'currentColor' : 'none'" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                        </svg>
                      </button>
                      
                      <!-- Read/Unread Toggle -->
                      <button
                        @click.stop="toggleRead(mail)"
                        class="p-1 rounded-full hover:bg-gray-100 text-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
                        :aria-label="mail.unread ? 'Mark as read' : 'Mark as unread'"
                        :disabled="isOffline"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path v-if="mail.unread" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                          <path v-else stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                      </button>
                      
                      <!-- AI Generate -->
                      <button
                        @click.stop="generateFor(mail)"
                        class="p-1 rounded-full hover:bg-gray-100 text-purple-500 focus:outline-none focus:ring-2 focus:ring-gray-500"
                        aria-label="Generate AI response"
                        :disabled="!connected || isOffline"
                        title="Generate AI Response"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                        </svg>
                      </button>
                      
                      <!-- More Actions Menu -->
                      <div class="relative">
                        <button
                          @click.stop="toggleMenu(mail, $event)"
                          class="p-1 rounded-full hover:bg-gray-100 text-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
                          aria-label="More actions"
                          :aria-expanded="activeMenuId === mail.id"
                          aria-haspopup="menu"
                        >
                          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                          </svg>
                        </button>
                        
                        <!-- Dropdown Menu -->
                        <div 
                          v-if="activeMenuId === mail.id"
                          class="absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg z-20"
                          role="menu"
                        >
                          <div class="py-1">
                            <button
                              @click="archive(mail)"
                              class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100"
                              role="menuitem"
                            >
                              Archive
                            </button>
                            <button
                              @click="openLabelMenu(mail)"
                              class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100"
                              role="menuitem"
                            >
                              Add Label...
                            </button>
                            <button
                              @click="assign(mail)"
                              class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100"
                              role="menuitem"
                            >
                              Assign
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <!-- Load More Section -->
          <div v-if="hasMore" class="px-6 py-4 border-t border-gray-200 text-center">
            <button
              @click="loadMore"
              :disabled="loadingMore || isOffline"
              class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <svg v-if="loadingMore" class="animate-spin -ml-1 mr-3 h-4 w-4" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              {{ loadingMore ? 'Loading...' : 'Load More Emails' }}
            </button>
          </div>
        </div>
      </div>
    </main>

    <!-- Email Detail Modal -->
    <div v-if="showDetail" class="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50" @click.self="closeDetail">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden" role="dialog" aria-modal="true" aria-labelledby="detailTitle">
        
        <!-- Modal Header -->
        <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200">
          <div class="flex-1 min-w-0">
            <h2 id="detailTitle" class="text-xl font-semibold text-gray-900 truncate">{{ selected?.subject }}</h2>
            <div class="mt-1 flex items-center text-sm text-gray-500">
              <span>From {{ selected?.senderName || selected?.senderEmail }}</span>
              <span class="mx-2">•</span>
              <time :datetime="selected?.date">{{ formatDate(selected?.date || '') }}</time>
            </div>
            <div class="mt-2 flex items-center space-x-2">
              <span :class="[
                'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                getStatusClass(selected?.status || '')
              ]">
                {{ selected?.status }}
              </span>
              <span v-if="selected?.priority" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                High Priority
              </span>
            </div>
          </div>
          <button
            @click="closeDetail"
            class="ml-3 bg-white rounded-md text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500"
            aria-label="Close modal"
          >
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>

        <!-- Modal Body -->
        <div class="flex-1 overflow-hidden flex">
          <!-- Email Content -->
          <div class="flex-1 overflow-y-auto p-6">
            <div class="prose max-w-none text-gray-900 whitespace-pre-wrap leading-relaxed">
              {{ selected?.body || 'No content available.' }}
            </div>
          </div>

          <!-- Sidebar -->
          <div class="w-80 border-l border-gray-200 overflow-y-auto p-6 bg-gray-50">
            
            <!-- AI Review Notice -->
            <div class="mb-6 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
              <div class="flex items-center">
                <svg class="w-5 h-5 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                </svg>
                <span class="text-sm font-medium text-yellow-800">Review before send</span>
              </div>
              <p class="mt-1 text-xs text-yellow-700">
                All AI-generated responses require manual review before sending.
              </p>
            </div>

            <!-- AI Summary -->
            <div class="mb-6">
              <h3 class="text-sm font-semibold text-gray-900 mb-3">AI Summary</h3>
              <div class="bg-white border border-gray-200 rounded-md p-4">
                <div v-if="!aiSummary" class="text-sm text-gray-500 italic">
                  No summary generated yet. Click "Generate AI Response" to analyze this email.
                </div>
                <div v-else class="text-sm text-gray-900 whitespace-pre-wrap">
                  {{ aiSummary }}
                </div>
              </div>
            </div>

            <!-- Extracted Entities -->
            <div class="mb-6">
              <h3 class="text-sm font-semibold text-gray-900 mb-3">Extracted Information</h3>
              <div class="bg-white border border-gray-200 rounded-md p-4">
                <div v-if="entities.length === 0" class="text-sm text-gray-500 italic">
                  No entities extracted yet.
                </div>
                <ul v-else class="space-y-2">
                  <li v-for="entity in entities" :key="entity" class="flex items-start">
                    <div class="w-2 h-2 bg-blue-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                    <span class="text-sm text-gray-900">{{ entity }}</span>
                  </li>
                </ul>
              </div>
            </div>

            <!-- Email Tags -->
            <div>
              <h3 class="text-sm font-semibold text-gray-900 mb-3">Tags</h3>
              <div class="flex flex-wrap gap-2">
                <span :class="[
                  'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                  getTypeClass(selected?.type || '')
                ]">
                  {{ selected?.type }}
                </span>
              </div>
            </div>
          </div>
        </div>

        <!-- Modal Footer -->
        <div class="px-6 py-4 border-t border-gray-200 flex items-center justify-between">
          <div class="flex space-x-3">
            <button
              @click="aiSummarize"
              :disabled="!connected || aiBusy || isOffline"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <svg v-if="aiBusy" class="animate-spin -ml-1 mr-3 h-4 w-4" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              {{ aiBusy ? 'Analyzing...' : 'Generate AI Response' }}
            </button>
            
            <button
              @click="convertToDocument"
              :disabled="isOffline"
              class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Convert to Document
            </button>
            
            <button
              @click="scheduleFollowUp"
              :disabled="isOffline"
              class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Schedule Follow-up
            </button>
          </div>
          
          <div v-if="!connected" class="text-sm text-gray-500">
            AI features locked until OAuth + consent granted
          </div>
        </div>
      </div>
    </div>

    <!-- Settings Modal -->
    <div v-if="showSettings" class="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50" @click.self="closeSettings">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full" role="dialog" aria-modal="true" aria-labelledby="settingsTitle">
        
        <!-- Modal Header -->
        <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200">
          <h2 id="settingsTitle" class="text-lg font-semibold text-gray-900">Email Settings</h2>
          <button
            @click="closeSettings"
            class="text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 rounded-md"
            aria-label="Close settings"
          >
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>

        <!-- Modal Body -->
        <div class="p-6 space-y-6">
          
          <!-- AI Permissions -->
          <div>
            <h3 class="text-sm font-medium text-gray-900 mb-3">AI Permissions</h3>
            <div class="space-y-3">
              <label class="flex items-start space-x-3 cursor-pointer">
                <input 
                  type="checkbox" 
                  v-model="consentAI" 
                  @change="persistConsent"
                  class="w-4 h-4 text-gray-900 border-gray-300 rounded focus:ring-gray-500 focus:ring-2 mt-0.5"
                  aria-describedby="ai-consent-description"
                />
                <div class="flex-1">
                  <span class="text-sm font-medium text-gray-900">Allow AI read access</span>
                  <p id="ai-consent-description" class="text-xs text-gray-500 mt-1">
                    Enable AI to read and analyze your emails for summaries and draft suggestions.
                  </p>
                </div>
              </label>
              
              <label class="flex items-start space-x-3 cursor-pointer">
                <input 
                  type="checkbox" 
                  v-model="draftOnly" 
                  @change="persistDraftOnly"
                  class="w-4 h-4 text-gray-900 border-gray-300 rounded focus:ring-gray-500 focus:ring-2 mt-0.5"
                  aria-describedby="draft-only-description"
                />
                <div class="flex-1">
                  <span class="text-sm font-medium text-gray-900">Draft-only mode</span>
                  <p id="draft-only-description" class="text-xs text-gray-500 mt-1">
                    AI will only create drafts and never send emails automatically.
                  </p>
                </div>
              </label>
            </div>
          </div>

          <!-- Account Information -->
          <div>
            <h3 class="text-sm font-medium text-gray-900 mb-3">Account Information</h3>
            <dl class="space-y-2 text-sm">
              <div class="flex justify-between">
                <dt class="text-gray-500">Consent given:</dt>
                <dd class="text-gray-900 font-mono text-xs">{{ consentTS || 'Not set' }}</dd>
              </div>
              <div class="flex justify-between">
                <dt class="text-gray-500">Last sync:</dt>
                <dd class="text-gray-900 font-mono text-xs">{{ lastSyncTitle || 'Never' }}</dd>
              </div>
            </dl>
          </div>

          <!-- Danger Zone -->
          <div class="pt-4 border-t border-gray-200">
            <h3 class="text-sm font-medium text-red-900 mb-3">Danger Zone</h3>
            <button
              @click="revokeAccess"
              class="inline-flex items-center px-3 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
            >
              Revoke All Access
            </button>
            <p class="mt-2 text-xs text-gray-500">
              This will disconnect your email account and remove all AI permissions. You'll need to reconnect to use email features.
            </p>
          </div>
        </div>

        <!-- Modal Footer -->
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end">
          <button
            @click="closeSettings"
            class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            Close
          </button>
        </div>
      </div>
    </div>

    <!-- Toast Notifications -->
    <div class="fixed top-4 right-4 z-50 space-y-2" aria-live="polite" aria-atomic="true">
      <div 
        v-for="toast in toasts" 
        :key="toast.id" 
        :class="[
          'max-w-sm w-full bg-white shadow-lg rounded-md pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden transform transition-all duration-300 ease-in-out',
          'translate-x-0 opacity-100'
        ]"
      >
        <div class="p-4">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <!-- Success Icon -->
              <svg v-if="toast.type === 'success'" class="h-6 w-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <!-- Error Icon -->
              <svg v-else-if="toast.type === 'error'" class="h-6 w-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
              </svg>
              <!-- Info Icon -->
              <svg v-else class="h-6 w-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </div>
            <div class="ml-3 w-0 flex-1 pt-0.5">
              <p class="text-sm font-medium text-gray-900">{{ toast.message }}</p>
            </div>
            <div class="ml-4 flex-shrink-0 flex">
              <button
                @click="removeToast(toast.id)"
                class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500"
                aria-label="Dismiss notification"
              >
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">

const user = ref<any>(null)
const pillTabs = computed(() => [
  { key: 'all', label: 'All' },
  { key: 'unread', label: 'Unread', count: counts.unread },
  { key: 'reminders', label: 'Reminders' },
  { key: 'contracts', label: 'Contracts' },
  { key: 'terminations', label: 'Terminations' },
  { key: 'ai', label: 'AI Pending', count: counts.ai },
])
const agreeOAuth = ref(false)
const consentAI = ref(false)
const consentTS = ref('')
const draftOnly = ref(false)
const isOffline = ref(false)

const banner = reactive<{ show:boolean; message:string; retry: null | (()=>any) }>({ show:false, message:'', retry:null })

const pill = ref<'all'|'unread'|'reminders'|'contracts'|'terminations'|'ai'>('all')
const query = ref('')
const filter = reactive({ status: '', tag: '', labelId: '' })
const sort = ref<'newest'|'oldest'|'priority'>('newest')

const emails = ref<any[]>([])
const page = ref(1)
const pageSize = 10
const loadingPortal = ref(true)
const nextPageToken = ref<string>('')
const loadingMore = ref(false)

const searchRef = ref<HTMLInputElement|null>(null)

const kpi = reactive({ thisWeek: 0, thisWeekDelta: '+0%', avgResponse: '—', aiSuggestions: 0, aiAcceptance: '—', followUps: 0, followUpNote: '' })

const counts = reactive({ unread: 0, ai: 0 })

const canProceed = computed(() => agreeOAuth.value && consentAI.value)
const connected = computed(() => !!user.value && canProceed.value)

const lastSync = ref<number>(Date.now())
const lastSyncRel = computed(()=> relative(new Date(lastSync.value).toISOString()))
const lastSyncTitle = computed(()=> new Date(lastSync.value).toLocaleString())

onMounted(() => {
  document.addEventListener('mousedown', onDocClick)
  try {
    agreeOAuth.value = localStorage.getItem('agree_oauth') === '1'
    consentAI.value = localStorage.getItem('consent_ai') === '1'
    consentTS.value = localStorage.getItem('consent_ts') || ''
    draftOnly.value = localStorage.getItem('draft_only') === '1'
  } catch {}
  fetchMe()
  try { if (typeof hydrateMock === "function") hydrateMock() } catch(e) {}
  
  try { if (typeof tryLoadGmail === "function") tryLoadGmail() } catch(e) {}

  window.addEventListener('keydown', onKeydown)
  const setOffline = ()=> { isOffline.value = !navigator.onLine }
  setOffline(); window.addEventListener('online', setOffline); window.addEventListener('offline', setOffline)
})

onBeforeUnmount(() => { window.removeEventListener('keydown', onKeydown); document.removeEventListener('mousedown', onDocClick) })

function onKeydown(e: KeyboardEvent) {
  if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase()==='k') {
    e.preventDefault(); searchRef.value?.focus()
  }
}

async function fetchMe() {
  try {
    const me: any = await $fetch('/api/auth/me')
    user.value = (me?.valid || me?.user) ? (me.user || me) : null
  } catch { user.value = null }
}

function persistConsent(){ try { localStorage.setItem('consent_ai', consentAI.value?'1':'0') } catch {} }
function persistDraftOnly(){ try { localStorage.setItem('draft_only', draftOnly.value?'1':'0') } catch {} }

function continueWithGmail() {
  if (!canProceed.value) return
  try { localStorage.setItem('agree_oauth','1'); localStorage.setItem('consent_ai','1'); localStorage.setItem('consent_ts', new Date().toISOString()); consentTS.value = localStorage.getItem('consent_ts')||'' } catch {}
  window.location.href = '/api/auth/google'
}

function continueWithMicrosoft() {
  if (!canProceed.value) return
  showBanner('Microsoft 365 integration is not configured yet.')
}

async function revokeAccess() {
  try { await $fetch('/api/auth/logout.get'); pushToast('info','Access revoked') } catch { pushToast('error','Logout failed') }
  try { localStorage.removeItem('agree_oauth'); localStorage.removeItem('consent_ai'); localStorage.removeItem('consent_ts') } catch {}
  user.value = null
}

function hydrateMock() {
  
 {
  const now = Date.now(); lastSync.value = now
  const types = ['General','Reminder','Contract','Termination']
  const statuses = ['Unread','Read','High Priority','AI Draft']
  emails.value = Array.from({length: 28}).map((_,i)=>({
    id: 'm'+i,
    senderName: ['Anna Schmidt','Dr. Keller','HR Team','Client Support'][i%4],
    senderEmail: ['anna@example.com','keller@kanzlei.de','hr@corp.com','support@service.io'][i%4],
    subject: ['Vertragsprüfung','Kündigungsfrist','Rückfrage zum Termin','Mahnung'][i%4] + ' #' + (1024+i),
    snippet: 'Kurzer Auszug aus der E‑Mail, um den Inhalt zu erkennen…',
    body: 'Sehr geehrte Damen und Herren,\n\nDies ist ein Beispieltext der E‑Mail. Bitte prüfen Sie die Fristen und antworten Sie entsprechend.\n\nMit freundlichen Grüßen',
    date: new Date(now - i*3600*1000).toISOString(),
    type: types[i%types.length],
    status: statuses[i%statuses.length],
    priority: i%7===0,
    unread: i%3===0
  }))
  updateCounts()
  Object.assign(kpi, { thisWeek: 138, thisWeekDelta: '+4.2%', avgResponse: '3h 12m', aiSuggestions: 24, aiAcceptance: '62%', followUps: 5, followUpNote: '2 due today' })
  setTimeout(()=> loadingPortal.value=false, 400)
}
}

function updateCounts(){
  counts.unread = emails.value.filter(m=>m.unread).length
  counts.ai = emails.value.filter(m=>m.status==='AI Draft').length
}

const filteredEmails = computed(()=>{
  let list = emails.value.slice()
  if (pill.value==='unread') list = list.filter(m=>m.unread)
  else if (pill.value==='reminders') list = list.filter(m=>m.type==='Reminder')
  else if (pill.value==='contracts') list = list.filter(m=>m.type==='Contract')
  else if (pill.value==='terminations') list = list.filter(m=>m.type==='Termination')
  else if (pill.value==='ai') list = list.filter(m=>m.status==='AI Draft')

  if (query.value.trim()) {
    const q = query.value.toLowerCase()
    list = list.filter(m=> (m.subject+m.snippet+m.senderName+m.senderEmail).toLowerCase().includes(q))
  }
  if (filter.status) list = list.filter(m=>m.status===filter.status)
  if (filter.tag) list = list.filter(m=>({Reminder:'Reminder',Contract:'Contract',Termination:'Termination',General:'General'})[m.type]===filter.tag)
  if (filter.labelId) {
    if (filter.labelId==='STARRED') list = list.filter(m=>m.starred)
    else if (filter.labelId==='IMPORTANT') list = list.filter(m=>m.priority)
    else list = list.filter(m=>Array.isArray(m.labelIds) && m.labelIds.includes(filter.labelId))
  }
  if (sort.value==='newest') list.sort((a,b)=> +new Date(b.date)-+new Date(a.date))
  else if (sort.value==='oldest') list.sort((a,b)=> +new Date(a.date)-+new Date(b.date))
  else if (sort.value==='priority') list.sort((a,b)=> (b.priority?1:0)-(a.priority?1:0))
  return list
})

const pagedEmails = computed(()=> filteredEmails.value.slice(0, page.value*pageSize))
const hasMore = computed(()=> filteredEmails.value.length > page.value*pageSize)
function loadMore(){ page.value++; pushToast('info','Loaded more') }

function initials(name:string){ return (name||'?').split(' ').map(s=>s[0]).join('').slice(0,2).toUpperCase() }
function relative(iso:string){
  try {
    const d = new Date(iso)
    let sec = Math.round((Date.now() - +d) / 1000)
    const locale = (typeof navigator !== 'undefined' && navigator.language) ? navigator.language : 'de-DE'
    const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto', style: 'narrow' })
    const abs = Math.abs(sec)
    if (abs < 60) return rtf.format(-sec, 'second')
    const min = Math.round(sec/60)
    if (Math.abs(min) < 60) return rtf.format(-min, 'minute')
    const hr = Math.round(min/60)
    if (Math.abs(hr) < 24) return rtf.format(-hr, 'hour')
    const day = Math.round(hr/24)
    return rtf.format(-day, 'day')
  } catch { return 'now' }
}
function formatDate(iso:string){
  try {
    const d = new Date(iso)
    const locale = (typeof navigator !== 'undefined' && navigator.language) ? navigator.language : 'de-DE'
    const fmt = new Intl.DateTimeFormat(locale, { dateStyle: 'short', timeStyle: 'short', hour12: false })
    return fmt.format(d)
  } catch { return iso }
}
function getTypeClass(type: string) {
  const classes = {
    'Reminder': 'bg-yellow-100 text-yellow-800',
    'Contract': 'bg-blue-100 text-blue-800',
    'Termination': 'bg-red-100 text-red-800',
    'General': 'bg-gray-100 text-gray-800'
  }
  return classes[type as keyof typeof classes] || 'bg-gray-100 text-gray-800'
}

function getStatusClass(status: string) {
  const classes = {
    'Unread': 'bg-blue-100 text-blue-800',
    'Read': 'bg-green-100 text-green-800',
    'High Priority': 'bg-red-100 text-red-800',
    'AI Draft': 'bg-purple-100 text-purple-800'
  }
  return classes[status as keyof typeof classes] || 'bg-gray-100 text-gray-800'
}


async function toggleRead(m:any){
  if(isOffline.value) return
  const was = m.unread
  m.unread = !m.unread
  updateCounts()
  try {
    const add = m.unread ? ['UNREAD'] : []
    const remove = m.unread ? [] : ['UNREAD']
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } })
    pushToast('success', m.unread ? 'Marked as unread' : 'Marked as read')
  } catch (e){
    // revert on failure
    m.unread = was
    updateCounts()
    pushToast('error','Failed to update status')
  }
}


function toggleMenu(m:any, ev?: Event){
  if (activeMenuId.value === m.id) { activeMenuId.value = null; return }
  activeMenuId.value = m.id
  menuAnchorEl = (ev?.currentTarget as HTMLElement) || null
  try { nextTick(() => { const el = document.querySelector(`[data-menu='${m.id}'] [data-item-index='0']`) as HTMLElement; el?.focus(); positionMenu(m.id) }) } catch {}
}


async function archive(m:any){
  if(isOffline.value) return
  try {
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add: [], remove: ['INBOX'] } })
    m.status='Read'; m.unread=false; activeMenuId.value=null; updateCounts();
    pushToast('success','Archived')
  } catch(e){ pushToast('error','Archive failed') }
}

function label(m:any){ if(isOffline.value) return; activeMenuId.value=null; pushToast('success','Label applied') }
function assign(m:any){ if(isOffline.value) return; activeMenuId.value=null; pushToast('success','Assigned') }

const labelMenuId = ref<string|null>(null)
const labels = ref<any[]>([])
const labelsLoaded = ref(false)
const labelSearch = ref('')
const selectedLabelIds = ref<Set<string>>(new Set())

async function ensureLabels(){
  if (labelsLoaded.value) return
  try { const r:any = await $fetch('/api/email/labels'); if(r?.success){ labels.value = r.labels; labelsLoaded.value = true } } catch(e){}
}

function openLabelMenu(m:any){
  ensureLabels(); labelMenuId.value = m.id; selectedLabelIds.value = new Set(m.labelIds||[])
}
function closeLabelMenu(){ labelMenuId.value = null }
function toggleLabelId(id:string){ if(selectedLabelIds.value.has(id)) selectedLabelIds.value.delete(id); else selectedLabelIds.value.add(id) }
async function saveLabels(m:any){
  const before = new Set(m.labelIds||[])
  const after = selectedLabelIds.value
  const add = Array.from(after).filter(x=>!before.has(x))
  const remove = Array.from(before).filter(x=>!after.has(x))
  try { await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } }); m.labelIds = Array.from(after); pushToast('success','Labels updated') } catch(e){ pushToast('error','Failed to update labels') }
  closeLabelMenu()
}

async function toggleStar(m:any){
  if(isOffline.value) return
  const was = !!m.starred
  m.starred = !m.starred
  try {
    const add = m.starred ? ['STARRED'] : []
    const remove = m.starred ? [] : ['STARRED']
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } })
    pushToast('success', m.starred ? 'Starred' : 'Unstarred')
  } catch(e){ m.starred = was; pushToast('error','Failed to toggle star') }
}
function bulkProcess(){ if(isOffline.value) return; pushToast('info','Bulk processed 10 items') }

const showDetail = ref(false)
const selected = ref<any>(null)
function openDetail(m:any){ selected.value=m; showDetail.value=true }
function closeDetail(){ showDetail.value=false }

const aiSummary = ref('')
const entities = ref<string[]>([])
const aiBusy = ref(false)

const activeMenuId = ref<string|null>(null)
let menuAnchorEl: HTMLElement | null = null

async function aiSummarize(){
  if(!connected.value || !selected.value || isOffline.value) return
  aiBusy.value=true; aiSummary.value=''; entities.value=[]
  try{
    const payload = { title: 'Email summary', document_type:'email', prompt: `Summarize key points, deadlines, parties, and requested actions.\n\nEmail:\n${selected.value.body}` }
    const res:any = await $fetch('/api/auth/proxy.post',{ method:'POST', body:{ path:'/api/ai/generate-document-simple', method:'POST', body: payload }})
    if(res?.success && res?.document?.content){ aiSummary.value = String(res.document.content); entities.value = extractEntities(aiSummary.value); pushToast('success','AI draft generated') }
    else { showBanner(res?.error || 'Generation failed', aiSummarize) }
  }catch(e:any){ showBanner(String(e?.data?.statusMessage || e?.message || e), aiSummarize) }
  finally{ aiBusy.value=false }
}

function extractEntities(text:string){
  const found = new Set<string>()
  ;(text.match(/\b\d{1,2}\.\d{1,2}\.\d{2,4}\b/g)||[]).forEach(x=>found.add('Date: '+x))
  ;(text.match(/\b[A-ZÄÖÜ][a-zäöü]+\s[A-ZÄÖÜ][a-zäöü]+\b/g)||[]).slice(0,3).forEach(x=>found.add('Name: '+x))
  return Array.from(found)
}

function generateFor(m:any){ if(isOffline.value) { pushToast('error','Offline: cannot generate'); return } openDetail(m); aiSummarize() }
function convertToDocument(){ if(isOffline.value) return; pushToast('info','Converted to document') }
function scheduleFollowUp(){ if(isOffline.value) return; pushToast('info','Follow-up scheduled') }

function positionMenu(mailId: string){
  const menu = document.querySelector(`[data-menu='${mailId}']`) as HTMLElement
  if (!menu) return
  const rect = menu.getBoundingClientRect()
  const vw = window.innerWidth, vh = window.innerHeight
  // vertical flip
  if (rect.bottom > vh - 8) { menu.style.top = 'auto'; (menu.style as any).bottom = '32px' } else { menu.style.top = '32px'; (menu.style as any).bottom = '' }
  // horizontal adjust
  if (rect.right > vw - 8) { menu.style.right = 'auto'; menu.style.left = '0px' } else { menu.style.left = ''; menu.style.right = '0px' }
}


function onDocClick(e: MouseEvent){
  if(!activeMenuId.value) return
  const menu = document.querySelector(`[data-menu='${activeMenuId.value}']`) as HTMLElement
  const btn = menuAnchorEl
  const target = e.target as Node
  if ((menu && menu.contains(target)) || (btn && btn.contains(target))) return
  activeMenuId.value = null
}

function onMenuKeydown(e: KeyboardEvent, count: number, mailId: string){
  const t = e.target as HTMLElement
  const idx = Number((t.dataset && (t as any).dataset.itemIndex) || 0)
  if (e.key === 'ArrowDown') { e.preventDefault(); const ni = (idx+1)%count; focusMenuItem(mailId, ni) }
  else if (e.key === 'ArrowUp') { e.preventDefault(); const ni = (idx-1+count)%count; focusMenuItem(mailId, ni) }
  else if (e.key === 'Escape') { e.preventDefault(); activeMenuId.value = null }
  else if (e.key === 'Home') { e.preventDefault(); focusMenuItem(mailId, 0) }
  else if (e.key === 'End') { e.preventDefault(); focusMenuItem(mailId, count-1) }
}

async function toggleImportant(m:any){
  if(isOffline.value) return
  const was = !!m.priority
  m.priority = !m.priority
  try {
    const add = m.priority ? ['IMPORTANT'] : []
    const remove = m.priority ? [] : ['IMPORTANT']
    await $fetch('/api/email/modify', { method:'POST', body:{ id: m.id, add, remove } })
    pushToast('success', m.priority ? 'Marked important' : 'Unmarked important')
  } catch(e){ m.priority = was; pushToast('error','Failed to toggle important') }
}

function focusMenuItem(mailId: string, index: number){
  const el = document.querySelector(`[data-menu='${mailId}'] [data-item-index='${index}']`) as HTMLElement
  el?.focus()
}


// Toasts
const toasts = ref<{id:number; type:'success'|'error'|'info'; message:string}[]>([])
let toastId = 1
function pushToast(type:'success'|'error'|'info', message:string){ const id=toastId++; toasts.value.push({id,type,message}); setTimeout(()=> removeToast(id), 2500) }
function removeToast(id:number){ toasts.value = toasts.value.filter(t=>t.id!==id) }

// Banner helpers
function showBanner(message:string, retry?: ()=>any){ banner.show=true; banner.message=message; banner.retry = retry || null }
function closeBanner(){ banner.show=false; banner.message=''; banner.retry=null }
function retryBanner(){ if (banner.retry) { const fn = banner.retry; closeBanner(); fn() } }

// Settings modal
const showSettings = ref(false)
function openSettings(){ showSettings.value = true }
function closeSettings(){ showSettings.value = false }
</script>

<style scoped>
/* Custom styles for the email interface */
.line-clamp-2 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}

/* Smooth transitions for interactive elements */
.transition-colors {
  transition-property: color, background-color, border-color;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

/* Focus ring styles consistent with Tailwind */
.focus\:ring-2:focus {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

/* Ensure proper scrollbar styling */
.overflow-y-auto::-webkit-scrollbar {
  width: 6px;
}

.overflow-y-auto::-webkit-scrollbar-track {
  background: #f1f5f9;
}

.overflow-y-auto::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

.overflow-y-auto::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}
</style>
