<template>
  <Teleport to="body">
    <div 
      v-if="isOpen" 
      class="auth-modal-overlay"
      @click="handleOverlayClick"
      aria-hidden="false"
      role="dialog"
    >
      <div 
        class="auth-modal"
        @click.stop
      >
        <div class="auth-modal-header">
          <h2 class="auth-modal-title">{{ isSignUp ? 'Registrieren' : 'Anmelden' }}</h2>
          <button class="auth-modal-close" @click="$emit('close')">×</button>
        </div>



        <div class="auth-content">
        <!-- Social Login Section -->
        <div class="social-login-section">
          <button class="social-button google" @click="handleGoogleAuth">
            <svg width="20" height="20" viewBox="0 0 24 24">
              <path fill="#4285f4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="#34a853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="#fbbc05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="#ea4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            Mit Google {{ isSignUp ? 'registrieren' : 'anmelden' }}
          </button>
        </div>

        <!-- Divider -->
        <div class="auth-divider">
          <span>oder mit E-Mail</span>
        </div>

        <!-- Authentication Form -->
        <form id="authForm" @submit.prevent="handleSubmit" class="auth-form">
          <!-- Name fields (only for sign up) -->
          <div v-if="isSignUp" class="auth-grid-2">
            <div class="auth-form-group">
              <label class="auth-form-label" for="authFirstName">Vorname</label>
              <input v-model="formData.firstName" type="text" id="authFirstName" class="auth-form-input" placeholder="Max">
            </div>
            <div class="auth-form-group">
              <label class="auth-form-label" for="authLastName">Nachname</label>
              <input v-model="formData.lastName" type="text" id="authLastName" class="auth-form-input" placeholder="Müller">
            </div>
          </div>
          <div v-if="isSignUp" class="auth-form-group">
            <label class="auth-form-label" for="authFullName">Vollständiger Name</label>
            <input v-model="formData.name" type="text" id="authFullName" class="auth-form-input" placeholder="Dr. Max Müller">
            <div v-if="errors.name" class="auth-error">{{ errors.name }}</div>
          </div>

          <!-- Email field -->
          <div class="auth-form-group">
            <label class="auth-form-label" for="authEmail">E-Mail-Adresse</label>
            <input 
              v-model="formData.email"
              type="email" 
              id="authEmail" 
              class="auth-form-input" 
              placeholder="ihre@email.com" 
              required
            >
            <div v-if="errors.email" class="auth-error">{{ errors.email }}</div>
          </div>

          <!-- Password field -->
          <div class="auth-form-group">
            <label class="auth-form-label" for="authPassword">Passwort</label>
            <input 
              v-model="formData.password"
              type="password" 
              id="authPassword" 
              class="auth-form-input" 
              placeholder="Ihr Passwort" 
              required
            >
            <div v-if="errors.password" class="auth-error">{{ errors.password }}</div>
          </div>

          <!-- Confirm Password field (only for sign up) -->
          <div v-if="isSignUp" class="auth-form-group">
            <label class="auth-form-label" for="authConfirmPassword">Passwort bestätigen</label>
            <input 
              v-model="formData.confirmPassword"
              type="password" 
              id="authConfirmPassword" 
              class="auth-form-input" 
              placeholder="Passwort bestätigen"
            >
            <div v-if="errors.confirmPassword" class="auth-error">{{ errors.confirmPassword }}</div>
          </div>

          <!-- Contact details (only for sign up) -->
          <div v-if="isSignUp" class="auth-grid-2">
            <div class="auth-form-group">
              <label class="auth-form-label" for="authPhone">Telefon</label>
              <input v-model="formData.phone" type="tel" id="authPhone" class="auth-form-input" placeholder="+49 170 1234567">
              <div v-if="errors.phone" class="auth-error">{{ errors.phone }}</div>
            </div>
            <div class="auth-form-group">
              <label class="auth-form-label" for="authCompany">Kanzlei/Firma</label>
              <input v-model="formData.company" type="text" id="authCompany" class="auth-form-input" placeholder="ANWALTS.AI GmbH">
            </div>
          </div>

          <!-- Address (only for sign up) -->
          <div v-if="isSignUp" class="auth-form-group">
            <label class="auth-form-label" for="authAddress1">Adresse</label>
            <input v-model="formData.addressLine1" type="text" id="authAddress1" class="auth-form-input" placeholder="Musterstraße 1">
            <div v-if="errors.addressLine1" class="auth-error">{{ errors.addressLine1 }}</div>
          </div>
          <div v-if="isSignUp" class="auth-form-group">
            <input v-model="formData.addressLine2" type="text" class="auth-form-input" placeholder="Adresszusatz (optional)">
          </div>
          <div v-if="isSignUp" class="auth-grid-2">
            <div class="auth-form-group">
              <label class="auth-form-label" for="authCity">Stadt</label>
              <input v-model="formData.city" type="text" id="authCity" class="auth-form-input" placeholder="Berlin">
              <div v-if="errors.city" class="auth-error">{{ errors.city }}</div>
            </div>
            <div class="auth-form-group">
              <label class="auth-form-label" for="authPostal">PLZ</label>
              <input v-model="formData.postalCode" type="text" id="authPostal" class="auth-form-input" placeholder="10115">
              <div v-if="errors.postalCode" class="auth-error">{{ errors.postalCode }}</div>
            </div>
          </div>
          <div v-if="isSignUp" class="auth-form-group">
            <label class="auth-form-label" for="authCountry">Land</label>
            <input v-model="formData.country" type="text" id="authCountry" class="auth-form-input" placeholder="Deutschland">
            <div v-if="errors.country" class="auth-error">{{ errors.country }}</div>
          </div>

          <!-- Form Options -->
          <div v-if="!isSignUp" class="auth-form-options">
            <label class="auth-checkbox-group">
              <input 
                v-model="formData.rememberMe"
                type="checkbox" 
                class="auth-checkbox"
              >
              <span>Angemeldet bleiben</span>
            </label>
            <a href="#" class="auth-link" @click="handleForgotPassword">Passwort vergessen?</a>
          </div>

          <!-- Actions now appear at the end of the form (scroll to reach) -->
          <div class="auth-actions">
            <div v-if="isSignUp" class="auth-consent-row">
              <label class="auth-checkbox-group auth-consent-checkbox">
                <input 
                  v-model="formData.acceptTerms"
                  type="checkbox" 
                  class="auth-checkbox" 
                  required
                >
                <span>Ich akzeptiere</span>
              </label>
              <NuxtLink to="/terms" class="auth-link">AGB</NuxtLink>
              <span>und</span>
              <NuxtLink to="/privacy" class="auth-link">Datenschutz</NuxtLink>
            </div>
            <div v-if="errors.terms && isSignUp" class="auth-error">{{ errors.terms }}</div>
            <button 
              type="submit" 
              class="auth-submit-button cta-with-lights" 
              :disabled="loading"
            >
              <span v-if="!loading">{{ isSignUp ? 'Registrieren' : 'Anmelden' }}</span>
              <div v-else class="auth-loading"></div>
            </button>
            <div class="auth-form-toggle auth-form-toggle-bottom">
              <span>{{ isSignUp ? 'Bereits ein Konto?' : 'Noch kein Konto?' }}</span>
              <button type="button" @click="toggleMode">
                {{ isSignUp ? 'Jetzt anmelden' : 'Jetzt registrieren' }}
              </button>
            </div>
          </div>

        </form>
        </div>
      </div>
    </div>
  </Teleport>
</template>

<script setup>
import { ref, reactive } from 'vue'

const props = defineProps({
  isOpen: Boolean
})

const emit = defineEmits(['close', 'auth-success'])

const isSignUp = ref(false)
const loading = ref(false)

const formData = reactive({
  // Shared
  name: '',
  email: '',
  password: '',
  confirmPassword: '',
  rememberMe: false,
  acceptTerms: false,
  // Registration details
  firstName: '',
  lastName: '',
  phone: '',
  company: '',
  addressLine1: '',
  addressLine2: '',
  city: '',
  postalCode: '',
  country: ''
})

const errors = reactive({
  name: '',
  email: '',
  password: '',
  confirmPassword: '',
  terms: '',
  phone: '',
  company: '',
  addressLine1: '',
  city: '',
  postalCode: '',
  country: ''
})

const handleOverlayClick = () => {
  emit('close')
}

const toggleMode = () => {
  isSignUp.value = !isSignUp.value
  clearErrors()
}

const clearErrors = () => {
  Object.keys(errors).forEach(key => errors[key] = '')
}

const validateForm = () => {
  clearErrors()
  let isValid = true

  if (isSignUp.value && !formData.name.trim()) {
    errors.name = 'Name ist erforderlich'
    isValid = false
  }

  if (!formData.email.trim()) {
    errors.email = 'E-Mail ist erforderlich'
    isValid = false
  }

  if (!formData.password.trim()) {
    errors.password = 'Passwort ist erforderlich'
    isValid = false
  }

  if (isSignUp.value) {
    if (!formData.confirmPassword.trim()) {
      errors.confirmPassword = 'Passwort bestätigen ist erforderlich'
      isValid = false
    } else if (formData.password !== formData.confirmPassword) {
      errors.confirmPassword = 'Passwörter stimmen nicht überein'
      isValid = false
    }

    // Additional recommended fields for registration
    if (!formData.firstName.trim()) {
      errors.name = 'Vorname ist erforderlich'
      isValid = false
    }
    if (!formData.lastName.trim()) {
      errors.name = errors.name || 'Nachname ist erforderlich'
      isValid = false
    }
    if (!formData.phone.trim()) {
      errors.phone = 'Telefonnummer ist erforderlich'
      isValid = false
    }
    if (!formData.addressLine1.trim()) {
      errors.addressLine1 = 'Adresse ist erforderlich'
      isValid = false
    }
    if (!formData.city.trim()) {
      errors.city = 'Stadt ist erforderlich'
      isValid = false
    }
    if (!formData.postalCode.trim()) {
      errors.postalCode = 'PLZ ist erforderlich'
      isValid = false
    }
    if (!formData.country.trim()) {
      errors.country = 'Land ist erforderlich'
      isValid = false
    }

    if (!formData.acceptTerms) {
      errors.terms = 'Sie müssen die AGB akzeptieren'
      isValid = false
    }
  }

  return isValid
}

const handleSubmit = async () => {
  if (!validateForm()) return

  loading.value = true

  try {
    if (isSignUp.value) {
      // Full registration (returns token + user)
      const registerResponse = await $fetch('/api/auth/register-full', {
        method: 'POST',
        body: {
          email: formData.email,
          name: formData.name || `${formData.firstName} ${formData.lastName}`,
          password: formData.password,
          profile: {
            firstName: formData.firstName,
            lastName: formData.lastName,
            firm: formData.company || 'Kanzlei',
            roleTitle: 'Rechtsanwalt',
            phone: formData.phone,
            website: '',
            marketingOptIn: false,
            consentAt: new Date().toISOString(),
            termsAcceptedAt: new Date().toISOString()
          }
        }
      })

      if (!registerResponse?.user || !registerResponse?.token) {
        errors.email = 'Registrierung fehlgeschlagen'
        return
      }

      // Persist auth for assistant backend calls
      try {
        localStorage.setItem('anwalts_auth_token', registerResponse.token)
        localStorage.setItem('anwalts_user', JSON.stringify(registerResponse.user))
      } catch (_) {}

      emit('auth-success', {
        user: registerResponse.user,
        type: 'signup',
        provider: 'email'
      })
    } else {
      // Login flow
      const response = await $fetch('/api/auth/login', {
        method: 'POST',
        credentials: 'include',
        body: {
          email: formData.email,
          password: formData.password
        }
      })

      if (!response?.success || !response?.user) {
        errors.email = 'Invalid email or password'
        return
      }

      try {
        // If backend also returns a token (per openapi), persist it for protected API calls
        if (response?.token) {
          localStorage.setItem('access_token', response.token)
          localStorage.setItem('anwalts_auth_token', response.token)
        }
        localStorage.setItem('anwalts_user', JSON.stringify(response.user))
      } catch (_) {}

      emit('auth-success', { user: response.user, type: 'signin', provider: 'email', token: response?.token })
    }
  } catch (error) {
    console.error('❌ Authentication error:', error)
    errors.email = isSignUp.value ? 'Registrierung fehlgeschlagen' : 'Login failed. Please try again.'
  } finally {
    loading.value = false
  }
}

const handleGoogleAuth = async () => {
  try {
    loading.value = true
    if (process.client) {
      const url = '/api/auth/google' + (location.search ? (location.search + '&') : '?') + 'debug=1'
      window.location.href = url
    }
  } catch (error) {
    console.error('Google OAuth error:', error)
    try { fetch('/api/debug/log', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ type: 'auth.google.error', message: String(error) }) }) } catch {}
  } finally {
    loading.value = false
  }
}

const handleForgotPassword = (e) => {
  e.preventDefault()
  // Handle forgot password
  console.log('Forgot password clicked')
}

// Prevent page scroll when modal is open
if (process.client) {
  watch(() => props.isOpen, (isOpen) => {
    try { document.body.style.overflow = isOpen ? 'hidden' : '' } catch (_) {}
  }, { immediate: true })
}
</script>

<style scoped>
/* Authentication Modal Overlay */
.auth-modal-overlay {
  position: fixed;
  isolation: isolate;
  inset: 0;
  background: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(8px);
  display: grid;
  place-items: center;
  align-items: center;
  justify-content: center;
  padding: 1rem;
  z-index: 9999;
  animation: fadeIn 0.2s ease-out;
}

/* Ensure overlay only intercepts when visible */
.auth-modal-overlay[hidden], .auth-modal-overlay.hidden { pointer-events: none; }

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* Authentication Modal */
.auth-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  margin: 0;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 24px;
  padding: 2rem;
  width: 100%;
  max-width: 420px;
  max-height: min(90vh, 760px);
  overflow: hidden;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
  animation: slideIn 0.3s ease-out;
  position: relative;
  z-index: 10000;
  display: grid;
  place-items: center;
  flex-direction: column;
}

/* Scroll container inside modal to ensure full content is reachable */
.auth-content {
  display: grid;
  place-items: center;
  flex-direction: column;
  gap: 0.75rem;
  flex: 1 1 auto;
  overflow-y: auto;
  padding-right: 6px;
  padding-bottom: 12px;
}
.auth-content::-webkit-scrollbar { width: 8px; }
.auth-content::-webkit-scrollbar-thumb { background: rgba(0,0,0,0.15); border-radius: 999px; }

@keyframes slideIn {
  from {
    opacity: 0;
    transform: scale(0.9) translateY(20px);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}

/* Modal Header */
.auth-modal-header {
  display: grid;
  place-items: center;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.auth-modal-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1e293b;
  margin: 0;
}

.auth-modal-close {
  background: none;
  border: none;
  color: rgba(0, 0, 0, 0.5);
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 8px;
  transition: all 0.2s ease;
}

.auth-modal-close:hover {
  color: #1e293b;
  background: rgba(0, 0, 0, 0.05);
}

/* Social Login Section */
.social-login-section {
  margin-bottom: 1.5rem;
}

.social-button {
  width: 100%;
  display: grid;
  place-items: center;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  padding: 0.875rem 1rem;
  margin-bottom: 0.75rem;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(10px);
  color: #374151;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.social-button:hover {
  background: rgba(255, 255, 255, 0.95);
  border-color: rgba(0, 0, 0, 0.2);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* Form Divider */
.auth-divider {
  display: grid;
  place-items: center;
  align-items: center;
  margin: 1.5rem 0;
  color: #64748b;
  font-size: 0.875rem;
}

.auth-divider::before,
.auth-divider::after {
  content: '';
  flex: 1;
  height: 1px;
  background: rgba(0, 0, 0, 0.1);
}

.auth-divider span {
  padding: 0 1rem;
}

/* Form Groups */
.auth-form-group {
  margin-bottom: 1rem;
}

.auth-form-label {
  display: block;
  margin-bottom: 0.5rem;
  color: #374151;
  font-size: 0.875rem;
  font-weight: 500;
}

.auth-form-input {
  width: 100%;
  padding: 0.875rem 1rem;
  background: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  color: #1e293b;
  font-size: 1rem;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.auth-form-input:focus {
  outline: none;
  border-color: #3b82f6;
  background: rgba(255, 255, 255, 0.95);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.auth-form-input::placeholder {
  color: #94a3b8;
}

/* Form Options */
.auth-form-options {
  display: grid;
  place-items: center;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.auth-checkbox-group {
  display: grid;
  place-items: center;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  color: #374151;
  cursor: pointer;
}

.auth-checkbox {
  width: 1rem;
  height: 1rem;
}

.auth-link {
  color: #3b82f6;
  text-decoration: none;
  font-size: 0.875rem;
  transition: color 0.2s ease;
}

.auth-link:hover {
  color: #1d4ed8;
  text-decoration: underline;
}

/* Submit Button */
.auth-submit-button {
  width: 100%;
  padding: 0.875rem 1rem;
  background: linear-gradient(135deg, #3b82f6, #1d4ed8);
  border: none;
  border-radius: 12px;
  color: white;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.auth-submit-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
}

.auth-submit-button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  transform: none;
}

/* Loading Animation */
.auth-loading {
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin: 0 auto;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Form Toggle */
.auth-form-toggle {
  text-align: center;
  margin-top: 1.5rem;
  font-size: 0.875rem;
  color: #64748b;
}

.auth-form-toggle button {
  background: none;
  border: none;
  color: #3b82f6;
  cursor: pointer;
  margin-left: 0.5rem;
  transition: color 0.2s ease;
}

.auth-form-toggle button:hover {
  color: #1d4ed8;
  text-decoration: underline;
}

.auth-form-toggle-bottom {
  margin-top: 0.5rem;
  padding-top: 0.25rem;
  border-top: 1px dashed rgba(0,0,0,0.08);
}

/* Error Messages */
.auth-error {
  color: #ef4444;
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

/* Quick switch note under header */
.auth-switch-note {
  display: grid;
  place-items: center;
  justify-content: flex-end;
  align-items: center;
  gap: 0.25rem;
  margin-top: -0.5rem;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
  color: #64748b;
}
.auth-switch-link {
  background: none;
  border: none;
  color: #3b82f6;
  cursor: pointer;
}
.auth-switch-link:hover {
  color: #1d4ed8;
  text-decoration: underline;
}

/* Mobile Responsive */
@media (max-width: 640px) {
  .auth-modal {
    margin: 1rem;
    padding: 1.5rem;
    border-radius: 20px;
  }

  .auth-form-options {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }
}

/* Form layout helpers */
.auth-form {
  display: grid;
  place-items: center;
  flex-direction: column;
  gap: 0.75rem;
}
.auth-form::-webkit-scrollbar { width: 6px; }
.auth-form::-webkit-scrollbar-thumb { background: rgba(0,0,0,0.15); border-radius: 999px; }
.auth-grid-2 {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0.75rem;
}
@media (max-width: 640px) {
  .auth-grid-2 { grid-template-columns: 1fr; }
}

/* Sticky actions at the end of the scroll content */
.auth-actions {
  margin-top: 0.5rem;
}

.auth-consent-row {
  display: grid;
  place-items: center;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-bottom: 0.5rem;
}
.auth-consent-checkbox {
  margin-right: 0.25rem;
}
</style>
/* === Enhanced glassmorphism + layout overrides === */
.auth-modal { max-width: 640px; padding: 2rem 2rem; background: linear-gradient(180deg, rgba(255,255,255,0.22), rgba(255,255,255,0.10)); backdrop-filter: blur(24px); border: 1px solid rgba(255,255,255,0.28); box-shadow: 0 30px 60px rgba(0,0,0,0.28); }
.auth-modal::before { content: ''; position: absolute; inset: -1px; border-radius: 24px; background: radial-gradient(1200px 300px at 10% -10%, rgba(59,130,246,0.20), transparent), radial-gradient(1200px 300px at 110% 110%, rgba(124,58,237,0.20), transparent); pointer-events: none; }
.auth-modal-header { display: flex; justify-content: space-between; align-items: center; width: 100%; }
.auth-content { width: 100%; display: flex; flex-direction: column; align-items: stretch; gap: 1rem; overflow-y: auto; overscroll-behavior: contain; }
.auth-form { width: 100%; }
.auth-form-input { background: rgba(255,255,255,0.7); }
@media (max-width: 640px) { .auth-modal { max-width: calc(100vw - 2rem); } }

/* === Professional UI overrides v2 (2025-09-14) === */
.auth-modal {
  width: min(700px, 92vw);
  max-width: 700px;
  max-height: min(82vh, 760px);
  padding: 28px 28px 24px;
  background: linear-gradient(180deg, rgba(255,255,255,0.20), rgba(255,255,255,0.10));
  border: 1px solid rgba(255,255,255,0.28);
  backdrop-filter: blur(24px);
  box-shadow: 0 30px 80px rgba(5, 16, 36, 0.32);
}
.auth-modal::before { content: ''; position: absolute; inset: -1px; border-radius: 24px; background: radial-gradient(1000px 260px at -10% -20%, rgba(59,130,246,0.18), transparent), radial-gradient(1000px 260px at 110% 120%, rgba(124,58,237,0.18), transparent); pointer-events: none; }
.auth-modal-header { display: flex; align-items: center; justify-content: space-between; width: 100%; margin-bottom: 12px; }
.auth-modal-title { font-size: 22px; font-weight: 800; color: #0f172a; letter-spacing: -0.01em; }
.auth-modal-close { font-size: 22px; color: rgba(2,6,23,0.55); }
.auth-content { width: 100%; display: flex; flex-direction: column; align-items: stretch; gap: 14px; overflow-y: auto; overscroll-behavior: contain; }
.auth-form { width: 100%; display: flex; flex-direction: column; gap: 12px; }
.auth-grid-2 { gap: 12px; }
.auth-form-group { margin-bottom: 10px; }
.auth-form-label { color: #0f172a; font-weight: 600; }
.auth-form-input { background: rgba(255,255,255,0.72); border-color: rgba(15,23,42,0.12); border-radius: 12px; }
.auth-form-input:focus { background: rgba(255,255,255,0.96); border-color: #2563eb; box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.12); }
.social-login-section { margin-top: 4px; }
.social-button { padding: 12px 14px; border-radius: 14px; }
.auth-submit-button { background: linear-gradient(90deg, #2563eb, #7c3aed); border: none; border-radius: 14px; padding: 12px 18px; font-weight: 700; letter-spacing: 0.01em; box-shadow: 0 8px 24px rgba(37, 99, 235, 0.25); }
.auth-submit-button:hover { transform: translateY(-1px); box-shadow: 0 10px 28px rgba(37, 99, 235, 0.32); }
.auth-divider { margin: 10px 0; color: #475569; }
@media (max-width: 640px) { .auth-modal { width: calc(100vw - 24px); max-width: none; padding: 22px 18px; } }